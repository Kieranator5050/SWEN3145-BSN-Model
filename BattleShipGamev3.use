model BattleShipGame
/* ---------- ---------- ---------- ---------- ---------- ---------- ----------
-- Enumerations
---------- ---------- ---------- ---------- ---------- ---------- ---------- */
enum PrivacyPolicy { Closed, FriendsOnly, Open, Unassigned }
enum YAxis { A, B, C, D, E, F, G, H, I, J }
enum XAxis { x1, x2, x3, x4, x5, x6, x7, x8, x9, x10 }
enum GameStatus { Starting ,Initialized, Started, Over }
enum TournamentStatus { Open, InProgress, Closed }
enum JoinedTStatus { Joined, Rejected, Banned, Eliminated, Left }
enum RoundIntervalType { Minutes, Hours, Days }
enum InviteStatus { Unassigned, Declined, Accepted, Invalid }
enum GameBoardStatus { Unassigned, Assigned }
enum GamePlayer { Player1, Player2, Unassigned }
enum GameShip { pb1, pb2, pb3, pb4, dd1, dd2, dd3, cl1, cl2, bb }
enum GameShipSizes { s1, s2, s3, s4 }
enum PlayerStatus { InGame, LeftGame }
enum PlayerStat { regGameWinLossRatio, tournGameWinLossRatio, friendCount }
enum RequestStatus { Sent, Recieved }
enum ReportCriteria { Cheating, InnapropriateText }
enum ChatroomType{ Private, Global }
enum TournRules { minGamesToJoin, maxWinLossRatio, minWinLossRatio, maxPlayers }
enum GameResult {Unassigned, Won, Loss }

--/*
-- Datatype Classes
--*/
class Date
attributes
    day: Integer init: 1
    month: Integer init: 1
    year: Integer init: 1901

operations
    --/** Updates the attribute values */
    initialise(d: Integer, m: Integer, y: Integer)
    begin
        self.day := d;
        self.month := m;
        self.year := y;
    end
    pre parametersHaveValidValues: isValid(d, m, y)
    post attributesCorrectlyUpdatedAlt:
        (if d = day@pre then day = day@pre else day = d endif) and
            (if m = month@pre then month = month@pre else month = m endif) and
                (if y = year@pre then year = year@pre else year = y endif)

    --/* Accessors */
    getDay(): Integer = day
    getMonth(): Integer = month
    getYear(): Integer = year

    --/* Mutators - ***** Fill in your OCL expressions and pre- and
    --            post-conditions for these  from the previous Modelling
    --            session that asked you to write them. */
    setDay(d: Integer)
    setMonth(m: Integer)
    setYear(y: Integer)

    --/** returns true if all the attributes are not null, false otherwise */
    isInitialised(): Boolean =
        day <> null and month <> null and year <> null

    --/** returns true if self is before d, , false otherwise */
    before(d: Date): Boolean = true /* ***** Fill in your OCL expression
                from  the previous Modelling session that asked you
                to write it. */

    --/** returns true if self has the same values as d, false otherwise */
    equals(d: Date): Boolean = day = d.day and month = d.month and year = d.year
    pre bothAreInitialised: isInitialised() and d.isInitialised()
    pre bothAreValid: isValid(day, month, year) and
        isValid(d.day, d.month, d.year)
    post returnValueConditions:
        let
            s = Set{day = d.day, month = d.month, year = d.month}
        in
            result =  s->excludes(false) /* true or flase will be in result */

    --/* returns true if self is after d, false otherwise */
    after(d: Date): Boolean = not equals(d) and not before(d)

    --/* returns true if y is a leap year, false otherwise */
    isLeapYear(y: Integer): Boolean =
        if (y.mod(400)=0 or (y.mod(100)>0 and y.mod(4)=0))
        then true
        else false
        endif
    pre yearIsValid: y > 1900

    dayValid(v: Integer): Boolean = v >= 1 and v <= 31

    monthValid(v: Integer): Boolean =  v >= 1 and v <= 12

    yearValid(v: Integer): Boolean = v > 1900

    dayAndMonthValid(d: Integer, m: Integer): Boolean =
        Set{4, 6, 9, 11}->includes(m) implies d < 31

    febValid(d: Integer, y: Integer): Boolean =
        (isLeapYear(y) implies d <= 29) and
            (not isLeapYear(y) implies d <= 28)

    isValid(d: Integer, m: Integer, y: Integer): Boolean =
         dayValid(d) and monthValid(m) and yearValid(y) and
            dayAndMonthValid(d, m) and (m = 2 implies febValid(d, y))

constraints
    inv dayValues: dayValid(day)
    inv monthValues: monthValid(month)
    inv yearValues: yearValid(year)
    inv monthsWith30Days: dayAndMonthValid(day, month)
    inv inLeapYearFebDaysCorrect: month = 2 implies febValid(day, year)
end

class DateTime < Date
attributes
    hour: Integer
    minute: Integer
    second: Integer
end

--/* ---------- ---------- ---------- ---------- ---------- ---------- ----------
-- Abstract Classes
---------- ---------- ---------- ---------- ---------- ---------- ---------- */

abstract class GameObserver
end

abstract class GameSubject
end

abstract class SSNObserver
end

abstract class SSNSubject
end

abstract class TObserver
end

abstract class TSubject
end

abstract class pRole
end

abstract class Turn < GameSubject, GameObserver
attributes
    currentPlayer: GamePlayer derived = determineCurrentPlayer()
    selectedShip: Ship derived = tShip
    selectedShipClassification: GameShip derived = tShip.classification
    selectedShipAP: Integer derived = tShip.actionPoints
    usedAP: Integer
    currentShipAP: Integer derived = selectedShipAP-usedAP
    turnTime: DateTime
    canRepeat: Boolean
operations
    --Select ship needs to be run to create an association between a turn an a ship
    --Called from createTurn() in GameBoard
    selectShip(sc: String): Ship
        begin
            declare stringClassification:OrderedSet(String), eClassification:OrderedSet(GameShip), shipClass:GameShip, ship:Ship;
            stringClassification:=OrderedSet{'pb1','pb2','pb3','pb4','dd1','dd2','dd3','cl1','cl2','bb'};
            eClassification:=OrderedSet{GameShip::pb1,GameShip::pb2,GameShip::pb3,GameShip::pb4,GameShip::dd1,GameShip::dd2,GameShip::dd3,GameShip::cl1,GameShip::cl2,GameShip::bb};

            shipClass:=eClassification->at(stringClassification->indexOf(sc));
            ship := self.game.ships->select(s|s.assignedPlayer=self.currentPlayer and s.classification=shipClass)->asOrderedSet()->first();
            insert(self,ship) into TurnShip;

            result:=ship
        end
    determineCurrentPlayer(): 
        GamePlayer = if game.turnCount.mod(2)=0 
                        then GamePlayer::Player1
                        else GamePlayer::Player2
                        endif
constraints
    -- The current player turn is player 1 when the turn counter is even and player 2 when the turn counter is odd
    inv correctPlayer: (game.turnCount.mod(2)=0 
                        implies currentPlayer = GamePlayer::Player1)
                        and 
                        (game.turnCount.mod(2)=1 
                        implies currentPlayer = GamePlayer::Player2)
            
    inv validSelectedAP: self.selectedShipAP = tShip.actionPoints
    inv validUsedAP: self.usedAP >= 0 and self.usedAP <= self.selectedShipAP
    inv turncanRepeatwithAP: 
        self.canRepeat
        implies 
        self.currentShipAP > 0

end

abstract class Ship < GameSubject
attributes
    assignedPlayer: GamePlayer derived = gameBoard.assignedPlayer
    healthPoints: Integer init: 0
    damagePoints: Integer init: 0
    actionPoints: Integer init : 0
    size: GameShipSizes
    classification: GameShip --A player has individual classifications
    isOnTheBoard: Boolean init: true
operations
    evaluateHit(): Integer
constraints
    inv onBoard: self.healthPoints > 0 implies self.isOnTheBoard = true 
    		and self.healthPoints < 0 implies self.isOnTheBoard = false
end

abstract class MoveAction < Turn
attributes
    isValid: Boolean
operations
    moveShip(fr: Set(BoardCell), to: Set(BoardCell)): Integer
        begin
            result := 0;
        end
constraints
    --A ship cannot move into another ship
    inv spaceUnoccupied: 
        self.affectedCells->forAll(c|c.isOccupied=false)

    --A ship can only move on the current player's board
    inv validMoveBoard:
        self.affectedCells
            ->forAll(c|
                c.gameBoard.assignedPlayer=self.currentPlayer)
end

abstract class Request < SSNSubject
attributes
    status: RequestStatus
operations
    changeRequestStatus(s: RequestStatus)
    getRequester(): Player
    getRecipient(): Player
end

abstract class Leaderboard
operations
    displayLeaderboard(): OrderedSet(Player)
end

abstract class AccessRestriction < SSNSubject
end
--/* ---------- ---------- ---------- ---------- ---------- ---------- ----------
--Extended Concrete Classes
---------- ---------- ---------- ---------- ---------- ---------- ---------- */
class Player < SSNObserver, TObserver
attributes
    username: String
    playerGameSlot : GamePlayer init: GamePlayer::Unassigned
    privacyPolicy: PrivacyPolicy init: PrivacyPolicy::Open
operations
    findPlayer(username: String): Player
        pre playerExists: 
            bsn.ssnPlayers
                ->select(p|p.username=username)
                    ->size()=1
                    
        post playerFound: 
            result=bsn.ssnPlayers
                    ->select(p|p.username=username)
                        ->asSequence()->first()

    sendFriendRequest(p: Player): Integer
    blockPlayer(p: Player): Integer
    viewDetails(p: Player): Integer
    reportPlayer(p: Player): Integer
    sendMessage(p: Chatroom): Integer
    setPrivacySettings(ps: PrivacyPolicy): Integer
    sendGameInvite(p: Player): Integer
    respondToGameInvite(): Integer
    leaveGame(g: Game): Integer

constraints
    inv nullUsername: self.username <> null
    inv noSelfReports: recievedRs.recipient->forAll(r|r<>self)
    inv noSelfRequests: reqFacts.sentRequest->asSet().recipient->forAll(r|r<>self)
    inv noSelfBlock: block->forAll(p|p.blockedPlayer<>self)
    inv gameInviteToFriend: 
    let
        invites = reqFacts.sentRequest
                    ->select(r|r.oclIsTypeOf(GameInvite)),
        gInviteRecipients = invites.recipient,
        friendNames = self.friends
                    ->select(f|f.isStillFriend)
                    ->collect(username)
    in 
        gInviteRecipients->forAll(r|friendNames->includes(r.username))
        
end

class Game < GameObserver, TSubject
attributes
    status: GameStatus init: GameStatus::Starting
    turnCount: Integer init: 0
    startedAt: DateTime
    gameTime: Integer
operations
    initializeGame(): Integer
    removeShip(sc: GameShip, gb: GameBoard): Integer
    damageShip(sc: GameShip, gb: GameBoard): Integer

    newTurn(): Integer
        begin
            --Declaring Variables
            declare gbs:OrderedSet(GameBoard), gb:GameBoard, turnType:String;
            
            --Reading turnType & getting gameboards
            WriteLine('Enter Turn Type');
            WriteLine('FireAction or MoveAction');
            turnType := ReadLine();
            gbs:=self.gameBoards->asOrderedSet();

            --If the turn is even player 1 else player 2
            if self.turnCount.mod(2)=0 
            then 
                --Player 1
                gb := gbs->select(gb|gb.assignedPlayer=GamePlayer::Player1)->first();
            else 
                --Player 2
                gb := gbs->select(gb|gb.assignedPlayer=GamePlayer::Player2)->first();
            end;
            gb.createTurn(turnType);
            result:=0
        end

    --Precondition : Game must already be started
    pre startedGame: self.status<>null implies self.status=GameStatus::Started
    --Postcondition : No post
    post noPost: true 

    repeatTurn(t: Turn): Integer
    endTurn(t: Turn): Integer
        begin
            declare turnShip: Ship;
            
            if turnShip.oclIsTypeOf(PatrolBoat)
            then
                t.tShip.actionPoints:=4;
            else
                WriteLine('');
            end;

            if turnShip.oclIsTypeOf(Destroyer)
            then
                t.tShip.actionPoints:=3;
            else
                WriteLine('');
            end;

            if turnShip.oclIsTypeOf(Cruiser)
            then
                t.tShip.actionPoints:=2;
            else
                WriteLine('');
            end;

            if turnShip.oclIsTypeOf(Battleship)
            then
                t.tShip.actionPoints:=1;
            else
                WriteLine('');
            end;

            self.newTurn();
            result:=0;

        end
    updateGameStatus(gs: GameStatus): Integer
    addPlayerToBoard(p: Player, gb: GameBoard): Integer
constraints
    inv onlyTwoTournPlayers:
        let
            players = round.tourn.joiners
        in
        players<>null implies players->size()=2

    inv noBannedPlayers:
    let 
        reqPlayer = invite.reqFact.requester,
        recPlayer = invite.recipient,
        admins = bsn.ssnPlayers
                        ->select(p|
                            p.aRole<>null 
                            and p.aRole->size()<>0
                            ),
        bans = admins.aRole.ssnBans.bPlayer->asSet(),
        tPlayers = round.tourn.joiners
    in
        (bans->excludes(reqPlayer) 
        and 
        bans->excludes(recPlayer))
            or
                (tPlayers<>null 
                implies 
                bans->excludesAll(tPlayers))

    inv correctShipCount:
    gameBoards
    ->forAll(gb|
                let
                    ships = gb.cells->collect(pShip)->asSet(),
                    pbs = ships->select(s|s.oclIsTypeOf(PatrolBoat)),
                    dds = ships->select(s|s.oclIsTypeOf(Destroyer)),
                    cls = ships->select(s|s.oclIsTypeOf(Cruiser)),
                    bbs = ships->select(s|s.oclIsTypeOf(Battleship))
                in
                    pbs->size()<=4 and dds->size()<=3 and
                    cls->size()<=2 and bbs->size()<=1
            )

    inv cellVisibility:
    gameBoards
    ->forAll(gb|
                if gb.assignedPlayer = GamePlayer::Player1
                then
                    gb.cells
                    ->forAll(c|
                        c.isVisibleTo=GamePlayer::Player1
                        and
                        c.isHiddenTo=GamePlayer::Player2)
                else
                    gb.cells
                    ->forAll(c|
                        c.isVisibleTo=GamePlayer::Player2
                        and
                        c.isHiddenTo=GamePlayer::Player1)
                endif
            )
    
    inv playersAssigned:
    gameBoards->forAll(gb|gb.assignedPlayer <> null)
        
end

class Administrator < pRole
end

class Host < pRole
end

class Message < Request
attributes 
    body: String
end

class FriendRequest < Request
attributes
    inviteStatus: InviteStatus
end

class GameInvite < Request
attributes 
    inviteStatus: InviteStatus
end

class Report < Request
attributes
    body: String
    criteria: ReportCriteria
end

class Blocked < AccessRestriction
attributes
end

class Banned < AccessRestriction
attributes 
end

class RegularLeaderboard < Leaderboard
end

class TournamentLeaderboard < Leaderboard
end

class Tournament < TSubject
attributes
    status: TournamentStatus init: TournamentStatus::Open
    startDate: DateTime
    roundInterval: Integer init: 15
    roundIntervalType: RoundIntervalType init: RoundIntervalType::Minutes
constraints
    inv bannedPlayersNotJoiners:
        joiners->forAll(j|bannedPlayers->excludes(j))
    inv hostNotJoiner:
        joiners->excludes(host)
end

class TournRule < TSubject
attributes
    rule: TournRules
    value: Real init: 0
end

-- Add Constraints to enforce the correct points when the game starts
-- Add Constraints to enforce a valid amount of points during the game
class PatrolBoat < Ship
constraints
    inv pbHP: self.healthPoints<>null implies self.healthPoints<=1
    inv pbDP: self.damagePoints<>null implies self.damagePoints=1
    inv pbAP: self.actionPoints<>null implies self.actionPoints<=4
    inv pbSize: self.size<>null implies self.size=GameShipSizes::s1
end

class Destroyer < Ship
constraints
    inv ddHP: self.healthPoints<>null implies self.healthPoints<=2
    inv ddDP: self.damagePoints<>null implies self.damagePoints=2
    inv ddAP: self.actionPoints<>null implies self.actionPoints<=3
    inv ddSize: self.size<>null implies self.size=GameShipSizes::s2
end

class Cruiser < Ship
constraints
    inv clHP: self.healthPoints<>null implies self.healthPoints<=3
    inv clDP: self.damagePoints<>null implies self.damagePoints=3
    inv clAP: self.actionPoints<>null implies self.actionPoints<=2
    inv clSize: self.size<>null implies self.size=GameShipSizes::s3
end

class Battleship < Ship
constraints
    inv bbHP: self.healthPoints<>null implies self.healthPoints<=4
    inv bbDP: self.damagePoints<>null implies self.damagePoints=4
    inv bbAP: self.actionPoints<>null implies self.actionPoints<=1
    inv bbSize: self.size<>null implies self.size=GameShipSizes::s4
end

class MoveUp < MoveAction
end

class MoveDown < MoveAction
end

class MoveLeft < MoveAction
end

class MoveRight < MoveAction
end

class FireAction < Turn
attributes
    isHit: Boolean
operations
    --Called by createTurn()
    --TurnShip, CurrentPlayerBoard, AttackBoard associations already exist when this is called
    fireShip(bc: BoardCell): Integer
        begin
            declare tShip: Ship, eBoard: GameBoard;
            tShip:=self.tShip;
            insert(self,bc) into Attack;

            if bc.pShip<>null
            then
                --Hit
                bc.hitCell(tShip);
                result:=0;
            else
                --Miss (End Turn)
                result:=1;
            end;
        end
constraints
    --A ship may only fire if it has the required amount of action points
    inv validFire:
        let
            ship = game.ships->select(s|
                                    s.assignedPlayer=self.currentPlayer 
                                    and 
                                    s.classification=self.selectedShip)->asOrderedSet()->last()
        in
            ship.actionPoints>0
    
    --A ship can only fire on the enemy board
    inv noSelfFire:
        attackedCells->forAll(c|
                c.gameBoard.assignedPlayer <> self.currentPlayer
            )
    
    inv noMissRepeat: self.isHit implies self.canRepeat 
end

--/* ---------- ---------- ---------- ---------- ---------- ---------- ----------
-- Unextended Classes
---------- ---------- ---------- ---------- ---------- ---------- ---------- */
class Friend
attributes
   username: String
   isStillFriend: Boolean 
end

class BattleShipSocialNetwork
operations
    registerNewPlayer(username: String, password: String, pPolicy: PrivacyPolicy): Integer
        pre noPre: true
        post playerRegistered: ssnPlayers->select(p|p.username=username)<>null

    logIn(username: String, password: String): Integer
        pre playerExists: ssnPlayers->select(p|p.username=username)<>null
        post noPost: true

    revokeAccountAccess(p: Player): Integer
    grantAccountAccess(p: Player): Integer
    blockIpAccess(ipAddress: String): Integer
    grantIpAccess(ipAddress: String): Integer
    createNewGame(): Integer
    getCurrentGames(): Set(Game)
    resetRegularLeaderboard(): Integer
    resetTournamentLeaderboard(): Integer
constraints
    inv oneGlobalChat: ssnPlayers.chatRooms->select(c|c.chatroomType=ChatroomType::Global)->size()=1
end

class Chatroom
attributes
    chatroomType: ChatroomType
constraints
    inv privateChatPlayers: 
        if self.chatroomType = ChatroomType::Private and self.chatroomType <> null
        then
            chatPlayers->size()=2
        else
            chatPlayers->size()>2
        endif
end

class Stat
attributes
    name: PlayerStat 
    value: Integer
end

class GameBoard
attributes
    assignedPlayerUsername: String derived = player.username
    assignedPlayer: GamePlayer init: GamePlayer::Unassigned
    status: GameBoardStatus
    assignedAt: DateTime
operations
    --Called by the Game newTurn() operation
    createTurn(type: String): Integer
        begin
            declare ss:String, cells:Set(BoardCell), enemyBoard:GameBoard, ship:Ship;

            if type='FireAction'
            then
                declare t:FireAction, cellX: String, cellY: String, xString:OrderedSet(String), yString:OrderedSet(String), x:OrderedSet(XAxis), y:OrderedSet(YAxis), hitResult:Integer;

                enemyBoard:=self.game.gameBoards->select(gb|gb<>self)->asOrderedSet()->first();

                t:=new FireAction();

                insert(self.game,t) into GameTurns;
                insert(t,self) into CurrentPlayerBoard;
                insert(t,enemyBoard) into AttackBoard;

                WriteLine('Enter Ship to Select');
                ss := ReadLine();
                ship := t.selectShip(ss);

                if ship.actionPoints<=0
                then
                    WriteLine('Enter X Coordinate');
                    cellX:=ReadLine();
                    WriteLine('Enter Y Coordinate');
                    cellY:=ReadLine();

                    yString := OrderedSet{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};
                    xString := OrderedSet{'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10'};
                    y := OrderedSet{YAxis::A, YAxis::B, YAxis::C, YAxis::D, YAxis::E, YAxis::F, YAxis::G, YAxis::H, YAxis::I, YAxis::J};
                    x := OrderedSet{XAxis::x1, XAxis::x2, XAxis::x3, XAxis::x4, XAxis::x5, XAxis::x6, XAxis::x7, XAxis::x8, XAxis::x9, XAxis::x10};

                    -- 0 Hit, 1 Miss
                    hitResult := t.fireShip(enemyBoard.cells
                                ->select(c|
                                    c.xCoord=x->at(xString->indexOf(cellX))
                                    and
                                    c.yCoord=y->at(yString->indexOf(cellY)))
                                        ->asOrderedSet()->first()
                                            );
                    
                    -- If hit then repeat else if miss then end
                    if hitResult=0
                    then
                        t.canRepeat := true
                    else
                        t.canRepeat := false
                    end;

                    if t.canRepeat
                    then
                        self.createTurn('FireAction');
                    else
                        self.game.turnCount := self.game.turnCount + 1;
                        self.game.endTurn(t);
                        result:=0;
                    end;
                    result:=0;
                else
                    self.createTurn('FireAction');
                end;


            else
                WriteLine('No fire');
            end;

            if type='MoveAction'
            then
                declare t:MoveAction;
                t:=new MoveAction();
                insert(self.game,t) into GameTurns;
                insert(t,self) into CurrentPlayerBoard;
                ss := ReadLine();
                t.selectShip(ss);
                --t.moveShip();
                self.game.turnCount := self.game.turnCount+1;
                t.canRepeat := false;
                self.game.newTurn();
                result:=0;
            else
                WriteLine('No Move');
            end;
        end
constraints
    -- The game board must have 10 ships on both boards when it is initialized. 
    -- 20 Cells are occupied in total on the board when all the ships are placed
    inv validInitShipCount: 
        (status=GameBoardStatus::Assigned and game.status=GameStatus::Initialized)
            implies
                cells->select(c|c.pShip->size()=1)->asSet()->size()=20
    
    -- Ships should be placed vertically only
    -- Recall a ship can be at most 4 cells long
    inv validShipPlacement:
    let 
        y = OrderedSet{YAxis::A, YAxis::B, YAxis::C, YAxis::D, YAxis::E, YAxis::F, YAxis::G, YAxis::H, YAxis::I, YAxis::J},
        x = OrderedSet{XAxis::x1, XAxis::x2, XAxis::x3, XAxis::x4, XAxis::x5, XAxis::x6, XAxis::x7, XAxis::x8, XAxis::x9, XAxis::x10}
    in 
    ((status=GameBoardStatus::Assigned 
    and 
    game.status=GameStatus::Initialized or game.status=GameStatus::Started))
        implies
            game.ships->forAll(s|
                                s.shipSpace->forAll(ss1, ss2|
                                x->indexOf(ss1.xCoord)=x->indexOf(ss2.xCoord)  
                                )
                                and s.shipSpace->size()<=4
                            )


end

class BoardCell
attributes 
    xCoord: XAxis
    yCoord: YAxis
    isOccupied: Boolean
    isVisibleTo: GamePlayer
    isHiddenTo: GamePlayer
operations
    --Called by fireShip()
    hitCell(hitBy: Ship): Integer
        begin
            result:=0
        end
end

class Round
end

class RequestFactory
operations
    makeGameInvite(): Integer
    makeFriendRequest(): Integer
    makeMessage(c: Chatroom): Integer
    makeReport(): Integer
end
--/* ---------- ---------- ---------- ---------- ---------- ---------- ----------
--Compositions
---------- ---------- ---------- ---------- ---------- ---------- ---------- */
composition GameBoards between
    Game[1]
    GameBoard[2] role gameBoards
end

composition GameCells between
    GameBoard[1]
    BoardCell[100] role cells 
end

--/* ---------- ---------- ---------- ---------- ---------- ---------- ----------
--Aggregations
---------- ---------- ---------- ---------- ---------- ---------- ---------- */
aggregation GameShips between
    Game[1]
    Ship[0..20] role ships
end

--/* ---------- ---------- ---------- ---------- ---------- ---------- ----------
--Association Classes
---------- ---------- ---------- ---------- ---------- ---------- ---------- */
associationclass Accepted between
    GameInvite[1] role invite
    Game[0..1] role game
attributes
    dateAccepted: DateTime
    gameResult: GameResult init: GameResult::Unassigned
    playerWinner: GamePlayer
end

associationclass RoundGames between
    Round[1] role round
    Game[1..*] role games ordered
attributes
    gameResult: GameResult init: GameResult::Unassigned
    playerWinner: GamePlayer
end

associationclass Joiners between
    Player[*] role joiners
    Tournament[*] role joinedTournaments
attributes
    joinedAt: DateTime
    status: JoinedTStatus init: JoinedTStatus::Joined
end

--/* ---------- ---------- ---------- ---------- ---------- ---------- ----------
--Associations
---------- ---------- ---------- ---------- ---------- ---------- ---------- */
association Players between
    BattleShipSocialNetwork[1] role bsn
    Player[*] role ssnPlayers
end

association SearchFor between
    Player[*] role searchedPlayer
    Player[*] role player
end

association Hoster between
    Host[1] role host 
    Tournament[*] role createdTournaments
end

association PlayerStats between
    Player[1] role player
    Stat[*] role stat 
end

association PlayerRoles between
    Player[*] role players
    pRole[*] role pRoles union
end

association Admins between
    Player[1] role admin
    Administrator[0..1] role aRole subsets pRoles
end

association SSNBans between
    Administrator[1] role admin
    Banned[*] role ssnBans
end

association Reports between
    Administrator[*] role viewedBy
    Report[*] role viewedReports
end

association Reporters between
    Player[1] role reportedPlayer redefines recipient
    Report[*] role recievedRs redefines recievedRequests
end

association Hosts between
    Player[1] role host
    Host[0..1] role hRole subsets pRoles
end

association BannedTournPlayers between
    Host[1] role host 
    Banned[*] role TBans
end

association LeaderboardPlayers between
    Player[*] role leaderboardPlayers ordered
    Leaderboard[0..1] role leaderboard
end

association RegLeaderboard between
    BattleShipSocialNetwork[1] role bsn
    RegularLeaderboard[*] role regLeaderBoard 
end

association TournLeaderboard between
    BattleShipSocialNetwork[1] role bsn
    TournamentLeaderboard[*] role tournLeaderBoard 
end

association TRules between
    Tournament[1] role tourn
    TournRule[*] role tRules
end

association Rounds between
    Tournament[1] role tourn
    Round[1..*] role rounds
end

association BannedTPlayers between
    Tournament[*] role tourns
    Player[*] role bannedPlayers
end

association BannedPlayer between
    Player[1] role bPlayer
    Banned[*] role bans
end

association Block between
    Player[1] role blocker
    Blocked[*] role block
end

association BlockedPlayer between
    Player[1] role blockedPlayer
    Blocked[*] role blocked
end

association Recipients between
    Player[1] role recipient
    Request[*] role recievedRequests
end

association RequesterFact between
    Player[1] role requester
    RequestFactory[*] role reqFacts
end

association Requests between
    RequestFactory[1] role reqFact
    Request[1] role sentRequest
end

association MessageTo between
    Message[1] role replyTo
    Message[1] role sentMessage
end

association ChatMessage between
    Chatroom[1] role chatRoom
    Message[*] role messages
end

association ChatRooms between
    Chatroom[*] role chatRooms
    Player[*] role chatPlayers
end

association GameSubjects between
    GameObserver[*] role gObserver
    GameSubject[*] role gSubjects
end

association SSNSubjects between
    SSNObserver[*] role ssnObserver
    SSNSubject[*] role ssnSubjects
end

association TSubjects between
    TObserver[*] role tObserver
    TSubject[*] role tSubjects
end

association CurrentPlayerBoard between
    Turn[*] role playerTurns ordered
    GameBoard[1] role currentPlayerBoard 
end

association GameTurns between
    Game[1] role game
    Turn[*] role turns ordered
end

association PositionedOn between
    Ship[0..1] role pShip 
    BoardCell[0..*] role shipSpace
end

association Attack between
    FireAction[*] role attacks
    BoardCell[1..*] role attackedCells
end 

association AttackBoard between
    FireAction[*] role attacks
    GameBoard[1] role enemyPlayerBoard
end

association ShipMove between
    MoveAction[*] role move
    BoardCell[2..*] role affectedCells
end

association TurnShip between
    Turn[1] role turn
    Ship[1] role tShip 
end

association Friends between
    Friend[*] role friends
    Player[1] role player
end

association bsnGames between
    BattleShipSocialNetwork[1] role bsn
    Game[*] role games
end

association ShipBoard between
    Ship[*] role ships
    GameBoard[0..1] role gameBoard 
end

association RepeatedTurn between
    Turn[1] role prevTurn
    Turn[0..1] role postTurn
end

association PlayerBoards between
    Player[1] role player
    GameBoard[*] role gameBoards 
end